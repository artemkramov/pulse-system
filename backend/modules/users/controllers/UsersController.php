<?php

namespace backend\modules\users\controllers;

use backend\controllers\CRUDController;
use Yii;
use common\models\User;
use common\models\UserSearch;
use yii\web\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use backend\controllers\AuthController;
use yii\helpers\ArrayHelper;
use developeruz\db_rbac\behaviors\AccessBehavior;
use backend\models\Employee;

/**
 * UsersController implements the CRUD actions for User model.
 */
class UsersController extends CRUDController
{

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->beanClass = User::className();
        $this->beanSearchClass = UserSearch::className();
    }

    /**
     * @return string|\yii\web\Response
     */
    public function actionChangePassword()
    {
        $model = User::find()->where(['id' => \Yii::$app->user->identity->id])->one();
        $model->scenario = "changePassword";
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            \Yii::$app->getSession()->setFlash('success', 'Updated successfully!');
            return $this->redirect(['change-password']);
        } else {
            return $this->render('change_password', [
                'model' => $model
            ]);
        }
    }

    /**
     * Displays a single User model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        $extraParams = [
            'roles'       => ArrayHelper::map(Yii::$app->authManager->getRoles(), 'name', 'description'),
            'user_permit' => array_keys(Yii::$app->authManager->getRolesByUser($id))
        ];
        return parent::actionView($id, false, $extraParams);
    }

    /**
     * Creates a new User model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $extraParams = [
            'roles'       => ArrayHelper::map(Yii::$app->authManager->getRoles(), 'name', 'description'),
            'user_permit' => [],
        ];
        return parent::actionCreate($extraParams);
    }

    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws ForbiddenHttpException
     */
    public function actionUpdate($id)
    {
        $extraParams = [
            'roles'       => ArrayHelper::map(Yii::$app->authManager->getRoles(), 'name', 'description'),
            'user_permit' => array_keys(Yii::$app->authManager->getRolesByUser($id))
        ];
        return parent::actionUpdate($id, false, $extraParams);
    }


}
